# -*- coding: utf-8 -*-
"""data_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yfFJeLtOpGRlLtvmEai27qZM1qc5VjPU
"""

#Here we find our final dataset to proceed. We perform various actions to make our data perfect by interpolation of missing values and putting 0 for no values.


##Load data for countries
import os
import fnmatch
import pandas as pd

countries = {}

for filename in os.listdir('.'):
    if fnmatch.fnmatch(filename, 'load_*'):
        countries[filename[5:7]] = filename

fulldata = pd.read_csv("./"+ countries[list(countries)[0]])
fulldata['Country'] = list(countries)[0]

for i in range(1 ,len(countries)):
  df_load_ = pd.read_csv("./"+ countries[list(countries)[i]])
  df_load_['Country'] = list(countries)[i]
  fulldata = pd.concat([fulldata, df_load_], ignore_index=True)

fulldata["StartTime_new"] = pd.to_datetime(fulldata["StartTime"], format="%Y-%m-%dT%H:%M+%S:%fZ", errors='coerce')
fulldata['StartTime_new'] = fulldata['StartTime_new'].dt.floor('H')

fulldata = fulldata[["StartTime_new", "Country", "Load"]]
fulldata = fulldata[(fulldata['StartTime_new'] >= '2022-01-01 00:00:00') & (fulldata['StartTime_new'] <= "31-12-2022 23:00:00")]

# Pivot the DataFrame to create a new DataFrame with columns for each country's load values for each hour
fulldata = fulldata.pivot_table(index='StartTime_new', columns='Country', values='Load', aggfunc='sum').reset_index()
fulldata = fulldata.sort_values('StartTime_new', ascending=True)







##Green_Energy Generation data

import os
# List of renewable energy codes to filter
energy_codes_to_append = ['B01', 'B09', 'B10', 'B11', 'B12', 'B13', 'B15', 'B16', 'B18', 'B19']

# Initialize an empty list to store filenames
matching_files = []

# Iterate through files in the folder
for filename in os.listdir("./"):
    # Check if the filename starts with 'gen' and any renewable energy code is found within the filename
    match_result = any(f"_{code}." in filename for code in energy_codes_to_append)
    if filename.startswith('gen') and match_result:
        # Append the filename to the list
         matching_files.append(filename)

countries = {}

for filename in matching_files:
        countries[filename[4:10]] = filename # country+energy code

fulldata_gen = pd.read_csv("./"+ countries[list(countries)[0]])
fulldata_gen['Country'] = list(countries)[0]


for i in range(1 ,len(countries)):
  df_gen_ = pd.read_csv("./"+ countries[list(countries)[i]])
  df_gen_['Country'] = list(countries)[i]
  fulldata_gen = pd.concat([fulldata_gen, df_gen_], ignore_index=True)

fulldata_gen["StartTime_new"] = pd.to_datetime(fulldata_gen["StartTime"], format="%Y-%m-%dT%H:%M+%S:%fZ", errors='coerce')
fulldata_gen['StartTime_new'] = fulldata_gen['StartTime_new'].dt.floor('H')

fulldata_gen = fulldata_gen[["StartTime_new", "Country", "quantity"]]

fulldata_gen = fulldata_gen[(fulldata_gen['StartTime_new'] >= '2022-01-01 00:00:00') & (fulldata_gen['StartTime_new'] <= "31-12-2022 23:00:00")]

fulldata_gen = fulldata_gen.pivot_table(index='StartTime_new', columns='Country', values='quantity', aggfunc='sum').reset_index()
fulldata_gen = fulldata_gen.sort_values('StartTime_new', ascending=True)

#Pivoting both tables

master_data = pd.DataFrame()
master_data = pd.merge(fulldata, fulldata_gen, on='StartTime_new')

for column in master_data.columns:
    first_valid_idx = master_data[column].first_valid_index()  # Get the index of first non-null value
    if first_valid_idx is not None:
        master_data[column].loc[:first_valid_idx] = master_data[column].loc[:first_valid_idx].fillna(0)  # Fill initial NaNs with 0

columns_to_interpolate = master_data.columns[master_data.isnull().any()].tolist()

for column in columns_to_interpolate:
    master_data[column] = master_data[column].interpolate(method='linear', limit_direction='both', inplace=False)


  #get all columns that has generation data
import re

col_names_all = master_data.columns
col_gen_pattern = '_B'
col_gen = list() #store names of columns having generated data
for c in col_names_all:
  match = re.search(col_gen_pattern, c)
  if match:
    col_gen.append(c)

#group generation columns of each country
country_codes = {
'SP' : 0, # Spain
'UK' : 1, # United Kingdom
'DE' : 2, # Germany
'DK' : 3, # Denmark
'HU' : 5, # Hungary
'SE' : 4, # Sweden
'IT' : 6, # Italy
'PO' : 7, # Poland
'NE' : 8 # Netherlands
                 }

country_keys = list(country_codes)

gen_in_each_country = list()
for c1 in country_keys :
  col_subset = list()
  for cn1 in col_gen:
        match1 = re.search(c1, cn1)
        if match1:
          col_subset.append(cn1)
  if len(col_subset):
      gen_in_each_country.append(col_subset)

for i in country_keys:
  for j in gen_in_each_country:
    country_considered = j[0][:2]
    if (i == country_considered):
        # print(country_considered)
        if len(j) > 1:
          master_data[country_considered+"_gen"] = 0
          for k in j:
            master_data[country_considered+"_gen"] =  master_data[country_considered+"_gen"] + master_data[k]
        else:
          master_data[country_considered+"_gen"] = 0
          master_data[country_considered+"_gen"] = master_data[j[0]]


columns_to_select = ['StartTime_new', 'DE','DK', 'HU', 'IT', 'NE', 'PO', 'SE', 'SP', 'UK', 'SP_gen','UK_gen', 'DE_gen', 'DK_gen', 'HU_gen', 'SE_gen', 'IT_gen', 'PO_gen', 'NE_gen']
selected_columns_df1 = master_data[columns_to_select]
# final_columns - has the complete dataset we need to proceed further after interpolation of missing values
final_columns = pd.DataFrame()

for col in columns_to_select:
    final_columns[col] = selected_columns_df1[col]