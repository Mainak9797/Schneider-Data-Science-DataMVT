# -*- coding: utf-8 -*-
"""model_training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmdH7mNu20D-4t4rgHvGkG-_JlrLOvDe
"""

#After data processing, the final_columns dataframe  is further used  for modelling. TBAT modelling has been used for modelling Load and Green energy generated.
#Complete Model data is being read and is being split while modelling into test and train sets(80/20 split)
#we are forecasting for 20% of the data in the latter half of the year plus 1 hour into the future

#MODELLING FOR LOAD CONSUMPTION
!pip install tbats
from tbats import TBATS

# Assuming master_data contains all relevant columns
columns_to_forecast = [col for col in final_columns.columns if not col.endswith('_gen') and col != 'StartTime_new']

forecast_df = pd.DataFrame()  # Create a DataFrame to store forecasts
mape_dict = {}

for col in columns_to_forecast:
    train_col = final_columns[['StartTime_new', col]]
    train_col.rename(columns={col: "Load"}, inplace=True)
    train_size = int(len(train_col) * 0.8)
    train, test = train_col.iloc[:train_size], train_col.iloc[train_size:]
    train.set_index('StartTime_new', inplace=True)

    # Fit the TBATS model for each column
    model = TBATS(seasonal_periods=[24], use_trend=True, use_box_cox=False, use_arma_errors=False)
    result = model.fit(train['Load'])

    forecast = result.forecast(steps=len(test)+1)

    # Calculate MAPE
    actual_values = test['Load']
    mape = np.mean(np.abs((actual_values - forecast[:-1]) / actual_values)) * 100
    mape_dict[col] = mape

    # Store the forecast in the DataFrame
    forecast_df[col] = forecast




# MODELLING FOR GREEN ENERGY GENERATION DATA
from tbats import TBATS
# Assuming master_data contains all relevant columns
columns_to_forecast = [col for col in final_columns.columns if col.endswith('_gen') and col != 'StartTime_new']

forecast_df_gen = pd.DataFrame()  # Create a DataFrame to store forecasts
mape_dict_gen = {}

for col in columns_to_forecast:
    train_col_gen = final_columns[['StartTime_new', col]]
    train_col_gen.rename(columns={col: "Load"}, inplace=True)
    train_size_gen = int(len(train_col_gen) * 0.8)
    train_gen, test_gen = train_col_gen.iloc[:train_size_gen], train_col_gen.iloc[train_size_gen:]
    train_gen.set_index('StartTime_new', inplace=True)

    # Fit the TBATS model for each column
    model_gen = TBATS(seasonal_periods=[24], use_trend=True, use_box_cox=False, use_arma_errors=False)
    result_gen = model_gen.fit(train_gen['Load'])

    forecast_gen = result_gen.forecast(steps=len(test_gen)+1)

    # Calculate MAPE
    actual_values_gen = test_gen['Load']
    mape_gen = np.mean(np.abs((actual_values_gen - forecast_gen[:-1]) / actual_values_gen)) * 100
    mape_dict_gen[col] = mape_gen

    # Store the forecast in the DataFrame
    forecast_df_gen[col] = forecast_gen

#we are saving the forecasted values of the Load and Green energy seperately in the forecast_df and forecast_df_gen